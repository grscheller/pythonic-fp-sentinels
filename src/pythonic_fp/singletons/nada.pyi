# Copyright 2023-2025 Geoffrey R. Scheller
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from collections.abc import Callable, Iterator
from typing import Any, ClassVar, Final, final
from .sentinel import Sentinel

__all__ = ['Nada']

@final
class Nada:
    __slots__ = ()
    _instance: ClassVar[Nada | None]
    _hash: ClassVar[int]

    SENTINEL: ClassVar[Final[Sentinel]] = Sentinel('Nada')

    def __new__(cls) -> Nada: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __add__(self, right: Any) -> Nada: ...
    def __radd__(self, left: Any) -> Nada: ...
    def __mul__(self, right: Any) -> Nada: ...
    def __rmul__(self, left: Any) -> Nada: ...
    def __eq__(self, right: Any) -> bool: ...
    def __ne__(self, right: Any) -> bool: ...
    def __ge__(self, right: Any) -> bool: ...
    def __gt__(self, right: Any) -> bool: ...
    def __le__(self, right: Any) -> bool: ...
    def __lt__(self, right: Any) -> bool: ...
    def __getitem__(self, index: int | slice) -> Any: ...
    def __setitem__(self, index: int | slice, item: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getattr__(self, name: str) -> Callable[..., Any]: ...
    def nada_get(self, alt: Any = SENTINEL) -> Any: ...
